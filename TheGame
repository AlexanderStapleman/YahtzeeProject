# Alexander Stapleman - Yahtzee Game
# Yahtzee Game Rules ====  https://www.hasbro.com/common/instruct/yahtzee.pdf
# Author Owns No Rights to Yahtzee

from random import randrange
from time import sleep
from itertools import islice


class ScoreCard:
    def __init__(self, PlayerNumber):
        self.PlayerNumber = PlayerNumber
        self.Points = 0
        self.Yahtzees = 0
        self.Card = {
            # Upper Section
            'Ones': 0,
            'Twos': 0,
            'Threes': 0,
            'Fours': 0,
            'Fives': 0,
            'Sixes': 0,
            # Lower Section
            'Three of a Kind': 0,
            'Four of a Kind': 0,
            'Full House': 0,
            'Small Straight': 0,
            'Large Straight': 0,
            'Yahtzee': 0,
            'Chance': 0,
        }
        # Used to determine if a category has already been scored in, checking if value is 0 isn't valid since you
        # could be forced to score in the "threes" category with no "3 dice"
        self.isScoredCard = {
            1: False,  # Ones
            2: False,  # Twos
            3: False,  # Threes
            4: False,  # Fours
            5: False,  # Fives
            6: False,  # Sixes
            7: False,  # Three of a kind
            8: False,  # Four of a kind
            9: False,  # Full House
            10: False,  # Small Straight
            11: False,  # Large Straight
            12: False,  # Yahtzee
            13: False  # Chance
        }
        self.yahtzee_score_options = {
            1: "Ones",
            2: "Twos",
            3: "Threes",
            4: "Fours",
            5: "Fives",
            6: "Sixes",
            7: "Three of a Kind",
            8: "Four of a Kind",
            9: "Full House",
            10: "Small Straight",
            11: "Large Straight",
            12: "Yahtzee",
            13: "Chance"
        }
        self.yahtzee_score_options_with_score = {
            7: "Three of a Kind - Total of all 5 dice",
            8: "Four of a Kind - Total of all 5 dice",
            9: "Full House - 25 Points",
            10: "Small Straight - 30 Points",
            11: "Large Straight - 40 Points",
            13: "Chance - 25 Total of all 5 dice"
        }

    def CalculateUpperSectionPoints(self):
        upper_section_points = sum(value for value in islice(self.Card.values(), 6))
        return upper_section_points

    def print(self):
        print('\n#########################')
        print('Scorecard for Player', self.PlayerNumber)
        print("Upper Section")
        print('#############')
        print('Ones: ', self.Card['Ones'])
        print('Twos:', self.Card['Twos'])
        print('Threes:', self.Card['Threes'])
        print('Fours:', self.Card['Fours'])
        print('Fives:', self.Card['Fives'])
        print('Sixes:', self.Card['Sixes'])
        print('#############')
        print('Lower Section')
        print('#############')
        print('3 of a Kind:', self.Card['Three of a Kind'])
        print('4 of a Kind:', self.Card['Four of a Kind'])
        print('Full House:', self.Card['Full House'])
        print('Small Straight:', self.Card['Small Straight'])
        print('Large Straight:', self.Card['Large Straight'])
        print('YAHTZEE:', self.Card['Yahtzee'])
        print('Chance:', self.Card['Chance'])
        print('#########################\n', )


def main():
    GameModeSelect = 0

    # GameMode Selection/Input Error Checking

    print('Welcome to my game of Yahtzee')
    try:
        try:
            GameModeSelect = input('Please select a game mode \n   1 Player = 1 \n   2 Player = 2 \n')
            if int(GameModeSelect) == 1:
                OnePlayerMode()
            elif int(GameModeSelect) == 2:
                TwoPlayerMode()
            else:
                print(str(GameModeSelect) + ' is not a valid input, Valid game modes are "1" or "2"')
                sleep(1)
                main()
        except ValueError as e:
            print(str(GameModeSelect) + ' is not a valid input, Valid game modes are "1" or "2"')
            print(e)
            sleep(1)
            main()
    except BaseException as e:
        print(e)


# One Player Mode
def OnePlayerMode():
    # Starting variables and declarations
    PlayerNumber = 1

    # Player Score card created
    PlayerOneScoreCard = ScoreCard(PlayerNumber)
    PlayerOneScoreCard.print()

    # Creating a turn count to manage length of game
    TurnTracker = 1

    # Initial Dice State
    DiceState = {"die1": 0, "die2": 0, "die3": 0, "die4": 0, "die5": 0}

    # Start Game
    while TurnTracker < 14:
        print("It is turn", TurnTracker)
        TurnTracker += 1
        TakeTurn(DiceState, PlayerOneScoreCard)

    final_score = FinalScoreing(PlayerOneScoreCard)

    print("##############################################"
          "#  Congratulations!! Your Final Score is {}  #"
          "##############################################".format(final_score))


def TwoPlayerMode():
    print("Two player not yet implemented")
    main()


def TakeTurn(DiceState, PlayerScoreCard):
    # Create list of dice to keep
    Keepers = []

    # How many rolls have happened this turn
    rollCount = 1

    # Turn's first roll of all dice
    DiceState = DiceRolling(DiceState, 0)

    print("Currently on roll 1")
    DiceRollingPrinter(DiceState, 0)

    # Used to decide if player manually scored without continuing to reroll.
    AlreadyScored = False

    # Iterate rolls
    for x in range(1, 4):

        # Ends turn if already scored this roll
        if AlreadyScored is True:
            break

        # Increment Rolls
        rollCount += 1

        # While loop for input error checking
        inputCheck = False
        if x < 3:
            while inputCheck is False:
                ScoreQuestion = input("Would you like to score now? y/n: ")
                if ScoreQuestion == "y" or ScoreQuestion == "Y":
                    # Score here
                    Score(PlayerScoreCard, DiceState)
                    AlreadyScored = True
                    break
                elif ScoreQuestion == "n" or ScoreQuestion == "N":
                    inputCheck = True
                    # Used to determine if entered dice to roll are valid
                    KeeperCheck = False
                    while KeeperCheck is False:
                        Keepers = [int(y) if y.isnumeric() else '' for y in
                                   input("Which dice would you like to keep? Separate dice with spaces.").split()]
                        KeeperCheck, Keepers = DiceToRerollCheck(Keepers)
                    # Reroll
                    DiceRolling(DiceState, 1, Keepers)
                    if rollCount != 1:
                        print("Currently on roll", rollCount)
                    DiceRollingPrinter(DiceState, 0)
                else:
                    print("Invalid input, Only enter 'y' or 'n'")
        else:
            # Score
            print()
            Score(PlayerScoreCard, DiceState)


def DiceRolling(DiceState, Mode, *DiceToKeep):
    # Reroll all dice
    if Mode == 0:
        for x in range(0, len(DiceState)):
            die = randrange(1, 7)
            DieToChange = format("die" + str(x + 1))
            DiceState.update({DieToChange: die})
        return DiceState
    # Reroll only selected dice
    if Mode == 1:
        # print(DiceState)
        diceToKeep = list(DiceToKeep[0])
        diceConversionToString = {
            1: "1",
            2: "2",
            3: "3",
            4: "4",
            5: "5",
            6: "6"
        }
        dice = [1, 2, 3, 4, 5]
        for die in diceToKeep:
            if diceToKeep.__contains__(die):
                dice.remove(int(die))
        # print(dice)
        for x in dice:
            die = randrange(1, 7)
            DieToChange = format("die" + str(diceConversionToString[x]))
            DiceState.update({DieToChange: die})
        # print(DiceState)


def Score(PlayerScoreCard, DiceState):
    # Initial Scoring

    print("Time to score.")
    sleep(1)
    print("Here is your current score")
    PlayerScoreCard.print()

    # Show player current state
    DiceScoringPrinter(DiceState)

    ###################################################################
    # Read page 6 of the Yahtzee Manual to Understand the Joker Rules #
    ###################################################################
    def JokerRuling(PlayerScoreCard, DiceState):
        joker_ruling_status = False
        counts = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
        for value in DiceState.values():
            counts[value] += 1

        if PlayerScoreCard.isScoredCard[12]:
            for totalDie in counts.values():
                if totalDie == 5:
                    if PlayerScoreCard.Card['Yahtzee'] == 50:
                        PlayerScoreCard.Yahtzees += 1
                    joker_ruling_status = True
                else:
                    joker_ruling_status = False
        else:
            joker_ruling_status = False
        return joker_ruling_status

    jokerStatus = JokerRuling(PlayerScoreCard, DiceState)
    if jokerStatus == True:
        AlternateJokerScoring(PlayerScoreCard, DiceState, )
    else:
        # Prompt user for category to score in.
        print("Use this chart to assist with scoring.\n"
              "Ones:1\n"
              "Twos:2\n"
              "Threes:3\n"
              "Fours:4\n"
              "Fives:5\n"
              "Sixes:6\n"
              "Three of a kind:7\n"
              "Four of a kind:8\n"
              "Full House:9\n"
              "Small Straight:10\n"
              "Large Straight:11\n"
              "Yahtzee:12\n"
              "Chance:13\n")

        UserScoringCategory = ""
        while 1:

            UserScoringCategory = input(
                "Which category would you like to score in? Enter the number that coresponds with "
                "the desired category: ")
            print("You entered: ", UserScoringCategory)

            if UserScoringCategory.isdigit():
                UserScoringCategory = int(UserScoringCategory)
                if 0 < UserScoringCategory < 14:
                    if not PlayerScoreCard.isScoredCard[UserScoringCategory]:
                        break
                    else:
                        print("Category already scored please select a different category.")

            print(
                "Invalid input, only input a number 1-13 that hasn't already been scored in to designate which category "
                "to score in.")
            sleep(1)

        # Determine how many points to assign
        points_to_score = PointCalculation(PlayerScoreCard, DiceState, UserScoringCategory)
        convertedScoringCategory = PlayerScoreCard.yahtzee_score_options[UserScoringCategory]
        # Assign the points
        PlayerScoreCard.Card[convertedScoringCategory] += points_to_score
        # Mark as scored
        PlayerScoreCard.isScoredCard[UserScoringCategory] = True

        PlayerScoreCard.print()


def AlternateJokerScoring(PlayerScoreCard, DiceState):
    # check if all upper section boxes have been scored in already
    counts = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    for value in DiceState.values():
        counts[value] += 1

    # Upper Section Alternate Scoring #
    remaining_upper_scoring_boxes = [x for x, y in PlayerScoreCard.isScoredCard.items() if y is False and x < 7]

    if not len(remaining_upper_scoring_boxes) == 0:
        possible_outcomes = {}

        stringToPrint = ""
        print("You must pick one of these options to score in.\nYour score will be the combined total of all 5 dice.\n")
        for number, remaining in enumerate(remaining_upper_scoring_boxes, start=1):
            possible_outcomes.update({number: remaining})
            stringToPrint += "{} {}\n".format(number, PlayerScoreCard.yahtzee_score_options[remaining])

        print(stringToPrint)

        while 1:

            UserScoringCategory = input(
                "\nWhich category would you like to score in? Enter the number that coresponds with "
                "the desired category: ")
            print("You entered: ", UserScoringCategory)

            if UserScoringCategory.isdigit():
                UserScoringCategory = int(UserScoringCategory)
                if 0 < UserScoringCategory <= len(remaining_upper_scoring_boxes):
                    points_to_score = TotalOfDice(counts)

                    category_to_score = possible_outcomes[UserScoringCategory]

                    # Joker scoring happens here for upper boxes
                    PlayerScoreCard.Card[PlayerScoreCard.yahtzee_score_options[category_to_score]] += points_to_score
                    PlayerScoreCard.isScoredCard[category_to_score] = True
                    print()

                    return
            else:
                print(
                    "Invalid input, only input a number 1-{}.".format(len(remaining_upper_scoring_boxes)))
    # Lower Section Alternate Scoring #
    remaining_lower_scoring_boxes = [x for x, y in PlayerScoreCard.isScoredCard.items() if
                                     y is False and x > 6 and x != 12]

    if not len(remaining_lower_scoring_boxes) == 0:
        possible_outcomes = {}

        stringToPrint = ""
        print("You must pick one of these options to score in.\nYour score will depend on chosen category\n")
        for number, remaining in enumerate(remaining_lower_scoring_boxes, start=1):
            possible_outcomes.update({number: remaining})
            stringToPrint += "{} {}\n".format(number, PlayerScoreCard.yahtzee_score_options_with_score[remaining])

        print(stringToPrint)

        while 1:

            UserScoringCategory = input(
                "\nWhich category would you like to score in? Enter the number that coresponds with "
                "the desired category: ")
            print("You entered: ", UserScoringCategory)

            if UserScoringCategory.isdigit():
                UserScoringCategory = int(UserScoringCategory)
                if 0 < UserScoringCategory <= len(remaining_lower_scoring_boxes):
                    # points_to_score = TotalOfDice(counts)

                    category_to_score = possible_outcomes[UserScoringCategory]
                    if category_to_score == 7:
                        points_to_score = TotalOfDice(counts)
                    elif category_to_score == 8:
                        points_to_score = TotalOfDice(counts)
                    elif category_to_score == 9:
                        points_to_score = 25
                    elif category_to_score == 10:
                        points_to_score = 30
                    elif category_to_score == 11:
                        points_to_score = 40
                    else:  # category_to_score is 13
                        points_to_score = TotalOfDice(counts)

                    # Joker scoring happens here for upper boxes
                    PlayerScoreCard.Card[PlayerScoreCard.yahtzee_score_options[category_to_score]] += points_to_score
                    PlayerScoreCard.isScoredCard[category_to_score] = True
                    print()

                    return
            else:
                print(
                    "Invalid input, only input a number 1-{}.".format(len(remaining_lower_scoring_boxes)))


def TotalOfDice(diceCounts):
    return (diceCounts[1]) + (diceCounts[2] * 2) + (diceCounts[3] * 3) + (diceCounts[4] * 4) + (
            diceCounts[5] * 5) + (diceCounts[6] * 6)


def PointCalculation(PlayerScoreCard, DiceState, CategoryToScore):
    counts = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}
    # Count number of each die
    for value in DiceState.values():
        counts[value] += 1

    # Used for a few of the scores

    if CategoryToScore == 1:
        return counts[1]

    if CategoryToScore == 2:
        return counts[2] * 2

    if CategoryToScore == 3:
        return counts[3] * 3

    if CategoryToScore == 4:
        return counts[4] * 4

    if CategoryToScore == 5:
        return counts[5] * 5

    if CategoryToScore == 6:
        return counts[6] * 6

    if CategoryToScore == 7:
        for totalDie in counts.values():
            if totalDie >= 3:
                return TotalOfDice(counts)
            else:
                return 0

    if CategoryToScore == 8:
        for totalDie in counts.values():
            if totalDie >= 4:
                return TotalOfDice(counts)
            else:
                return 0

    if CategoryToScore == 9:
        found_two_same = False
        found_three_same = False
        for totalDie in counts.values():
            if totalDie == 2:
                found_two_same = True
            if totalDie == 3:
                found_three_same = True

        if found_three_same and found_two_same:
            return 25
        else:
            return 0

    if CategoryToScore == 10:
        if (counts[1] and counts[2] and counts[3] and counts[4]) or \
                (counts[2] and counts[3] and counts[4] and counts[5]) or \
                (counts[3] and counts[4] and counts[5] and counts[6]):
            return 30
        else:
            return 0

    if CategoryToScore == 11:
        if (counts[1] and counts[2] and counts[3] and counts[4] and counts[5]) or \
                (counts[2] and counts[3] and counts[4] and counts[5] and counts[6]):
            return 40
        else:
            return 0

    if CategoryToScore == 12:
        points = 0
        for totalDie in counts.values():
            if totalDie == 5:
                PlayerScoreCard.Yahtzees += 1
                points += 50
            else:
                pass
        return points

    if CategoryToScore == 13:
        return TotalOfDice(counts)


def FinalScoreing(PlayerScoreCard):
    final_points = 0

    for x in PlayerScoreCard.Card.values():
        final_points += x

    if PlayerScoreCard.Card["Yahtzee"] > 0:
        final_points += (PlayerScoreCard.Yahtzees - 1) * 100

    if PlayerScoreCard.CalculateUpperSectionPoints() >= 63:
        final_points += 35

    return final_points


def DiceToRerollCheck(DiceList):
    # print(DiceList)
    if len(DiceList) == 0:
        return True, DiceList
    if len(DiceList) > 5:
        print("Too many arguments try again")
        return False, DiceList
    PassCheck = False
    for die in DiceList:
        if not isinstance(die, int):
            print("Only Numbers Allowed")
            return False, DiceList
        elif int(die) > 5 or int(die) < 0:
            print("Only Numbers between 1-5 allowed")
            return False, DiceList
        else:
            PassCheck = True
    return PassCheck, DiceList


def DiceRollingPrinter(DiceState, Mode):
    # Starting Print
    # Mode used to define the following
    # Mode 0 Dice Rolling
    if Mode == 0:
        for x in range(1, 6):
            DieToPrint = format("die" + str(x))
            print("Rolling die ", str(x), end='')
            for p in range(0, 3):
                sleep(.1)
                print('.', end='')
            sleep(.1)
            print(" ", DiceState[DieToPrint], )
        print()
    # Mode 1 Print Dice State


def DiceScoringPrinter(DiceState):
    # Print final dice state for scoring
    print("YOUR DICE TO SCORE!")
    for x in range(1, 6):
        # Format text to search DiceState dictionary with
        DieToPrint = format("die" + str(x))

        print("Die ", str(x), " ==> ", end='', sep='')
        print(DiceState[DieToPrint])
    print()


if __name__ == "__main__":
    main()
